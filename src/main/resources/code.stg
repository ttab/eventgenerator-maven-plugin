group code;

fireMethod(ctor, subclassName) ::= <<
public static \<S extends HasEventHandlers & HasHandlers\> void fire(S source, <it.args:{<it.type> <it.name>}; separator=", ">) {
	<subclassName> event = new <subclassName>(<it.args:{<it.name>}; separator=", ">);
	source.fireEvent(event);
}

>>

body(packageName, className, subclassName, eventName, constructors, extendsClause) ::= <<
package <packageName>;

import com.google.gwt.event.shared.EventHandler;
import com.google.gwt.event.shared.GwtEvent;
import com.google.gwt.event.shared.HandlerRegistration;
import com.google.gwt.event.shared.HasHandlers;

/**
 * Generated by eventgenerator-maven-plugin.	
 */
public class <className> extends <extendsClause> {

	public final static Connectable.Type\<HasEventHandlers, Handler\> TYPE = new Connectable.Type\<HasEventHandlers, Handler\>() {
		@Override
		public HandlerRegistration connect(HasEventHandlers hasHandlers, Handler handler) {
			return hasHandlers.add<eventName>Handler(handler);
		}
	};

	@Override
	public GwtEvent.Type\<Handler\> getAssociatedType() {
		return TYPE;
	}

	@Override
	protected void dispatch(Handler handler) {
		handler.on<eventName>((<subclassName>) this);
	}

	public interface Handler extends EventHandler {
		void on<eventName>(<subclassName> ev);
	}

	public interface HasEventHandlers extends HasHandlers {
		HandlerRegistration add<eventName>Handler(Handler handler);
	}

	<constructors:fireMethod(subclassName=subclassName)>
}
>>

event(packageName, className, subclassName, eventName, constructors, superClass) ::= <<
<body(extendsClause={<superClass>\<<className>.Handler\>},...)>
>>

request(packageName, className, subclassName, eventName, constructors) ::= <<
<body(extendsClause={GwtEvent\<<className>.Handler\>},...)>
>>

