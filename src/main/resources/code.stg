group code;

arglist(args) ::= <<
S source<if(args)>,<endif> <args:{<it.type> <it.name>}; separator=", ">
>>

fireMethodEvent(ctor, subclassName) ::= <<
public static \<S extends HasEventHandlers & HasHandlers\> void fire(S source<if(it.args)>,<endif> <it.args:{<it.type> <it.name>}; separator=", ">) {
	<subclassName> event = new <subclassName>(<it.args:{<it.name>}; separator=", ">);
	source.fireEvent(event);
}

>>

fireMethodRequest(ctor, subclassName, partnerClass) ::= <<
public static \<S extends HasEventHandlers & HasHandlers\> void fire(S source<if(it.args)>,<endif> <it.args:{<it.type> <it.name>}; separator=", ">) {
	<subclassName> event = new <subclassName>(<it.args:{<it.name>}; separator=", ">);
	source.fireEvent(event);
}

public static \<S extends HasEventHandlers & HasHandlers\> void fire(S source<if(it.args)>,<endif> <it.args:{<it.type> <it.name>}; separator=", ">, <partnerClass>.Handler exclusive) {
	<subclassName> event = new <subclassName>(<it.args:{<it.name>}; separator=", ">);
	event.setExclusiveRecipient(exclusive);
	source.fireEvent(event);
}

>>

fireMethodResponse(ctor, subclassName, partnerClass) ::= <<
public static \<S extends HasEventHandlers & HasHandlers\> void fire(S source, <it.args:{<it.type> <it.name>}; separator=", ">) {
	<subclassName> event = new <subclassName>(<it.args:{<it.name>}; separator=", ">);
	event.dispatchResponse(source);
}

>>

constructor(ctor, className) ::= <<
protected <className>(<it.args:{<it.type> <it.name>}; separator=", ">) {
	super(<it.args:{<it.name>}; separator=", ">);
}
>>

body(packageName, className, subclassName, eventName, constructors, superclassConstructors, fireMethod, extendsClause) ::= <<
package <packageName>;

import com.google.gwt.event.shared.EventHandler;
import com.google.gwt.event.shared.GwtEvent;
import com.google.gwt.event.shared.HandlerRegistration;
import com.google.gwt.event.shared.HasHandlers;

import lib.gwt.client.event.Connectable;
import lib.gwt.client.event.AbstractRequest;
import lib.gwt.client.event.AbstractResponse;
import lib.gwt.client.event.AbstractUserManagerResponse;

/**
 * Generated by eventgenerator-maven-plugin.
 */
@SuppressWarnings("unused")
public class <className> extends <extendsClause> {

	public final static Connectable.Type\<HasEventHandlers, Handler\> TYPE = new Connectable.Type\<HasEventHandlers, Handler\>() {
		@Override
		public HandlerRegistration connect(HasEventHandlers hasHandlers, Handler handler) {
			return hasHandlers.add<eventName>Handler(handler);
		}
	};

	@Override
	public GwtEvent.Type\<Handler\> getAssociatedType() {
		return TYPE;
	}

	@Override
	protected void dispatch(Handler handler) {
		handler.on<eventName>((<subclassName>) this);
	}

	public interface Handler extends EventHandler {
		void on<eventName>(<subclassName> ev);
	}

	public interface HasEventHandlers extends HasHandlers {
		HandlerRegistration add<eventName>Handler(Handler handler);
	}

	<fireMethod>

	<superclassConstructors:constructor(className=className)>
}
>>

event(packageName, className, subclassName, eventName, constructors, superclassConstructors, superClass) ::= <<
<body(extendsClause={<superClass>\<<className>.Handler\>},
	fireMethod={<constructors:fireMethodEvent(subclassName=subclassName)>}, ...)>
>>

request(packageName, className, subclassName, eventName, constructors, superclassConstructors, superClass, partnerClass) ::= <<
<body(extendsClause={<superClass>\<<partnerClass>, <className>.Handler\>},
        fireMethod={<constructors:fireMethodRequest(subclassName=subclassName, partnerClass=partnerClass)>}, ...)>
>>

response(packageName, className, subclassName, eventName, constructors, superclassConstructors, superClass, partnerClass) ::= <<
<body(extendsClause={<superClass>\<<partnerClass>, <className>.Handler\>},
        fireMethod={<constructors:fireMethodResponse(subclassName=subclassName, partnerClass=partnerClass)>}, ...)>

>>

